"""
Query is used to fetch a single and all items
Mutation is used to create, update and delete items
"""
schema {
    query: Query
    mutation: Mutation
}


"""
The 'Job' type represents the Job table in our database
The pairing is as follows
column_name: var_type
"""
type Job {
    job_id: Int!
    job_role: String!
    job_description: String!
    job_company: String!
}


"""
The 'JobSkill' type represents the JobSkill table in our database
"""
type JobSkill {
    job_id: Int!
    skill_name: String!
}


"""
The 'JobResult' type represents the result of a single Job query
"""
type JobResult {
    success: Boolean!
    errors: [String]
    job: Job
}


type JobSkillResult {
    success: Boolean!
    errors: [String]
    job_skill: JobSkill
}


"""
The 'JobsResult' type represents the result of a query for all Jobs
"""
type JobsResult {
    success: Boolean!
    errors: [String]
    jobs: [Job]
}


type JobSkillsResult {
    success: Boolean!
    errors: [String]
    job_skills: [JobSkill]
}


"""
The 'DeleteResult' type represents the result of a delete operation
"""
type DeleteResult {
    success: Boolean!
    errors: [String]
}


"""
We use the 'Query' type to define all of the available queries
"""
type Query {
    get_jobs(skill_name: String!): JobsResult!
    get_job_skills(job_id: Int!): JobSkillsResult!
    get_job(job_id: Int!): JobResult!
    get_job_skill(job_id: Int!, skill_name: String!): JobSkillResult!
}


"""
We use the 'Mutation' type to define all of the available mutations
"""
type Mutation {
    create_job(job_role: String!, job_description: String!, job_company: String!): JobResult!
    create_job_skill(job_id: Int!, skill_name: String!): JobSkillResult!
    update_job(job_id: Int!, job_role: String!, job_description: String!, job_company: String!): JobResult!
    update_job_skill(job_id: Int!, old_skill: String!, new_skill: String!): JobSkillResult!
    delete_job(job_id: Int!): DeleteResult!
    delete_job_skill(job_id: Int!, skill_name: String!): DeleteResult!
}
